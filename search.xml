<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/10/08/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[^1]:<a href="https://www.jianshu.com/p/b758332c44bb">Python字符串的处理 - 简书 (jianshu.com)</a></p>
<h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><p>字符串处理[^1]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#拼接</span></span><br><span class="line"><span class="comment"># str.join()方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;-&#x27;</span></span><br><span class="line">seq = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>); <span class="comment"># 字符串序列</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.join(seq)  <span class="comment"># &#x27;a-b-c&#x27;</span></span><br></pre></td></tr></table></figure>

<p>分隔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27; 1 , 2 , 3 , 4 , 5 , &#x27;</span></span><br><span class="line"><span class="comment"># 默认使用空格分隔</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.split()   <span class="comment"># [&#x27;1&#x27;, &#x27;,&#x27;, &#x27;2&#x27;, &#x27;,&#x27;, &#x27;3&#x27;, &#x27;,&#x27;, &#x27;4&#x27;, &#x27;,&#x27;, &#x27;5&#x27;, &#x27;,&#x27;]</span></span><br><span class="line"><span class="comment"># 指定使用空格进行分隔，首尾如果有空格，则会出现在结果中</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.split(<span class="string">&#x27; &#x27;</span>) <span class="comment"># [&#x27;&#x27;, &#x27;1&#x27;, &#x27;,&#x27;, &#x27;2&#x27;, &#x27;,&#x27;, &#x27;3&#x27;, &#x27;,&#x27;, &#x27;4&#x27;, &#x27;,&#x27;, &#x27;5&#x27;, &#x27;,&#x27;, &#x27;&#x27;]</span></span><br><span class="line"><span class="comment"># 指定其他字符串进行分隔</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.split(<span class="string">&#x27;,&#x27;</span>) <span class="comment"># [&#x27; 1 &#x27;, &#x27; 2 &#x27;, &#x27; 3 &#x27;, &#x27; 4 &#x27;, &#x27; 5 &#x27;, &#x27; &#x27;]</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.split(<span class="string">&#x27;3 ,&#x27;</span>) <span class="comment"># [&#x27; 1 , 2 , &#x27;, &#x27; 4 , 5 , &#x27;]</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;mississippi&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.rstrip(<span class="string">&#x27;ip&#x27;</span>)</span><br><span class="line"><span class="comment"># 取行, python 中把 &quot;\r&quot;，&quot;\n&quot;，&quot;\r\n&quot;，作为行分隔符</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;ab c\n\nde fg\rkl\r\n&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.splitlines()      <span class="comment"># [&#x27;ab c&#x27;, &#x27;&#x27;, &#x27;de fg&#x27;, &#x27;kl&#x27;]</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.splitlines(<span class="literal">True</span>)  <span class="comment"># [&#x27;ab c\n&#x27;, &#x27;\n&#x27;, &#x27;de fg\r&#x27;, &#x27;kl\r\n&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>前后缀结尾</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># str.startswith(str, beg=0,end=len(string))</span></span><br><span class="line"><span class="comment"># 检查字符串以指定子字符串开头，如果是则返回 True，否则返回 False</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;this is string example....wow!!!&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.startswith( <span class="string">&#x27;this&#x27;</span> );       <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.startswith( <span class="string">&#x27;is&#x27;</span>, <span class="number">2</span>, <span class="number">4</span> )    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.startswith( <span class="string">&#x27;this&#x27;</span>, <span class="number">2</span>, <span class="number">4</span> )  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str.endswith(suffix[, start[, end]])</span></span><br><span class="line"><span class="comment"># 以指定后缀结尾返回True，否则返回False</span></span><br><span class="line">suffix = <span class="string">&quot;wow!!!&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.endswith(suffix);         <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.endswith(suffix,<span class="number">20</span>);      <span class="comment"># True</span></span><br><span class="line">suffix = <span class="string">&quot;is&quot;</span>;</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.endswith(suffix, <span class="number">2</span>, <span class="number">4</span>);   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.endswith(suffix, <span class="number">2</span>, <span class="number">6</span>);   <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<p>分割</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># str.partition(del)</span></span><br><span class="line"><span class="comment"># 返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;http://www.baidu.com/&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>.partition(<span class="string">&quot;://&quot;</span>)   <span class="comment"># (&#x27;http&#x27;, &#x27;://&#x27;, &#x27;www.baidu.com/&#x27;)</span></span><br><span class="line"><span class="comment"># string.rpartition(str)   从右边开始</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/08/2021-10-08-hello-world-test/</url>
    <content><![CDATA[<h1 id="Hello-liji"><a href="#Hello-liji" class="headerlink" title="Hello liji"></a>Hello liji</h1><p>hi，guys！</p>
<p><img src="2021-10-08-hello-world-test.assets/githubImg.jpg" alt="githubImg"></p>
]]></content>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[^1]:<a href="https://zhuanlan.zhihu.com/p/127807805">Python正则表达式，这一篇就够了！ - 知乎 (zhihu.com)</a></p>
<p>[2]:<a href="https://www.cnblogs.com/cute/p/9186208.html">Python 正则表达式（分组） - zhezhelin - 博客园 (cnblogs.com)</a></p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="1-语法规则-1"><a href="#1-语法规则-1" class="headerlink" title="1 语法规则[^1]"></a>1 语法规则[^1]</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.I<span class="comment">#ignorecase,忽略大小写</span></span><br><span class="line">re.A<span class="comment">#ascii,只匹配ascii,不是unicode</span></span><br><span class="line">re.S<span class="comment">#dotall,匹配所有东西,包括\n</span></span><br><span class="line">re.M<span class="comment">#multiline,多行模式</span></span><br><span class="line"><span class="comment">#可使用|叠加使用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一般是 re.findall(pattern,text,re.I)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">^;匹配 行 开头</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h4 id="2-字符串编码"><a href="#2-字符串编码" class="headerlink" title="2 字符串编码"></a>2 字符串编码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">u&#x27;...&#x27;</span><span class="comment">#unicode编码</span></span><br><span class="line"><span class="string">r&#x27;\\&#x27;</span><span class="comment">#去掉转义机制</span></span><br><span class="line"><span class="string">b&#x27;&#x27;</span><span class="comment">#bytes编码</span></span><br><span class="line"><span class="string">f&#x27;&#x27;</span><span class="comment">#字符串拼接;</span></span><br><span class="line">eg:name =<span class="string">&#x27;miles&#x27;</span>  <span class="built_in">print</span>(<span class="string">f&#x27;hello,<span class="subst">&#123;name&#125;</span>&#x27;</span>)  <span class="comment">#hello,miles</span></span><br></pre></td></tr></table></figure>

<h4 id="3-re模块函数"><a href="#3-re模块函数" class="headerlink" title="3 re模块函数"></a>3 re模块函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找单个匹配</span></span><br><span class="line">re.search()<span class="comment">#任意匹配</span></span><br><span class="line">re.match()<span class="comment">#开头开始匹配</span></span><br><span class="line">re.fullmatch()<span class="comment">#整个字符串都匹配,有用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找多个匹配</span></span><br><span class="line">re.findall()<span class="comment">#返回list</span></span><br><span class="line">re.finditer()<span class="comment">#返回iter</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#compile用法</span></span><br><span class="line">a = re.<span class="built_in">compile</span>(..)</span><br><span class="line">a.search()</span><br><span class="line">re.purge()<span class="comment">#清理正则缓存</span></span><br></pre></td></tr></table></figure>

<h4 id="4-分组法"><a href="#4-分组法" class="headerlink" title="4 分组法"></a>4 分组法</h4><p><strong>无名分组</strong></p>
<p>分组就是用一对圆括号“()”括起来的正则表达式，匹配出的内容就表示一个分组。从正则表达式的左边开始看，看到的第一个左括号“(”表示第一个分组，第二个表示第二个分组，依次类推，需要注意的是，有一个隐含的全局分组（就是0），就是整个正则表达式。<br>分完组以后，要想获得某个分组的内容，直接使用group(num)和groups()函数去直接提取就行。</p>
<p><strong>命名分组</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(?P&lt;name&gt;reg) </span><br><span class="line">s = <span class="string">&quot;ip=&#x27;230.192.168.78&#x27;,version=&#x27;1.0.0&#x27;&quot;</span></span><br><span class="line">res = re.search(<span class="string">r&quot;ip=&#x27;(?P&lt;ip&gt;\d+\.\d+\.\d+\.\d+).*&quot;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="string">&#x27;ip&#x27;</span>))<span class="comment">#通过命名分组引用分组</span></span><br><span class="line"><span class="string">&#x27;230.192.168.78&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-group-和groups"><a href="#5-group-和groups" class="headerlink" title="5 group 和groups"></a>5 group 和groups</h4><p>group和groups是两个不同的函数。</p>
<p>一般，m.group(N) 返回第N组括号匹配的字符。<br>而m.group() == m.group(0) == 所有匹配的字符，与括号无关，这个是API规定的。</p>
<p>m.groups() 返回所有括号匹配的字符，以tuple格式。<br>m.groups() == (m.group(0), m.group(1), …)<br>————————————————<br>版权声明：本文为CSDN博主「real_Daniel」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/real_ray/article/details/17502573">https://blog.csdn.net/real_ray/article/details/17502573</a></p>
<p>6 lastindex</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/08/%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0(%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95)/</url>
    <content><![CDATA[<h2 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h2><p>也叫特殊方法</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[^1]: <a href="https://blog.csdn.net/Zhongjie1986/article/details/91732434">(12条消息) Python <strong>str</strong>() 方法_Zhongjie1986的博客-CSDN博客</a><br>[^2]:<a href="http://c.biancheng.net/view/2380.html">Python <strong>call</strong>()方法（详解版） (biancheng.net)</a></p>
<p>[^3]:<a href="https://blog.csdn.net/xhw88398569/article/details/48691003">Python <strong>iter</strong>()迭代器 （十三）_魔法学徒de专栏-CSDN博客_next</a></p>
<p>特殊方法</p>
<h3 id="1-str"><a href="#1-str" class="headerlink" title="1 __str__()"></a>1 __str__()</h3><p>不重写此方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name,age</span>):</span></span><br><span class="line">        self.<span class="built_in">id</span>=<span class="built_in">id</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">s=Student(<span class="number">111</span>,<span class="string">&quot;Bob&quot;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment">#&lt;main.Student object at 0x0362EBF0&gt;</span></span><br></pre></td></tr></table></figure>

<p>重写方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,<span class="built_in">id</span>,name,age</span>):</span></span><br><span class="line">        self.<span class="built_in">id</span>=<span class="built_in">id</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学号:&#123;&#125;--姓名:&#123;&#125;--年&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.<span class="built_in">id</span>,self.name,self.age)</span><br><span class="line">    </span><br><span class="line">s=Student(<span class="number">111</span>,<span class="string">&quot;Bob&quot;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment">#学号:111–姓名:Bob–年龄18</span></span><br></pre></td></tr></table></figure>

<h3 id="2-常用的魔法函数"><a href="#2-常用的魔法函数" class="headerlink" title="2 常用的魔法函数"></a>2 常用的魔法函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    #This is the class of cat.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;my name is %s&#x27;</span>%self.name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cat: &#x27;</span>,args[<span class="number">0</span>]+args[<span class="number">1</span>])</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;i want to eat you&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&#x27;%s ,my name&#x27;</span>%self.name)</span><br><span class="line"></span><br><span class="line">cat = Cat(<span class="string">&#x27;Kitty&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cat.__doc__)</span><br><span class="line"><span class="built_in">print</span>(cat.__module__)<span class="comment">#__main__ 当前文件的意思</span></span><br><span class="line"><span class="built_in">print</span>(cat.__class__)<span class="comment">#__main__.cat 当前文件的类</span></span><br><span class="line"><span class="built_in">print</span>(cat.__class__.__name__)</span><br><span class="line"><span class="built_in">print</span>(cat.__dict__)<span class="comment">#属性字典</span></span><br><span class="line"><span class="built_in">print</span>(cat.__dir__())</span><br><span class="line"><span class="built_in">print</span>(cat.__dir__)</span><br><span class="line">cat(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">#类做函数</span></span><br><span class="line"><span class="built_in">print</span>(cat)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(cat))<span class="comment">#看着这个比__dir__()要好看一点</span></span><br></pre></td></tr></table></figure>

<h3 id="3-call-用-call-弥补-hasattr-函数的短板"><a href="#3-call-用-call-弥补-hasattr-函数的短板" class="headerlink" title="3 _call_: 用 call() 弥补 hasattr() 函数的短板"></a>3 <em>_call</em>_: 用 <strong>call</strong>() 弥补 hasattr() 函数的短板</h3><p>前面章节介绍了 hasattr() 函数的用法，该函数的功能是查找类的实例对象中是否包含指定名称的属性或者方法，但该函数有一个缺陷，即它无法判断该指定的名称，到底是类属性还是类方法[^2]。</p>
<p>要解决这个问题，我们可以借助可调用对象的概念。要知道，类实例对象包含的方法，其实也属于可调用对象，但类属性却不是。举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CLanguage</span>:</span>    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span> (<span class="params">self</span>):</span>        </span><br><span class="line">        self.name = <span class="string">&quot;421&quot;</span>          </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span>        </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;我正在学Python&quot;</span>)</span><br><span class="line">clangs = CLanguage()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(clangs,<span class="string">&quot;name&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hasattr</span>(clangs.name,<span class="string">&quot;__call__&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(clangs,<span class="string">&quot;say&quot;</span>):    </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hasattr</span>(clangs.say,<span class="string">&quot;__call__&quot;</span>))</span><br><span class="line">*********output***********</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>可以看到，由于 name 是类属性，它没有以 <strong>call</strong> 为名的 <strong>call</strong>() 方法；而 say 是类方法，它是可调用对象，因此它有 <strong>call</strong>() 方法。</p>
<h3 id="4-iter-和-next"><a href="#4-iter-和-next" class="headerlink" title="4 __iter__和 next"></a>4 __iter__和 next</h3><p>iter的妙用,用到的时候直接看.</p>
<p>简单解释就是iter调用自己一次,返回自己.自动调用next来工作.[^3]</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/08/%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
